datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?             @map("email_verified")
  image               String?
  password            String?               @db.Text
  address             String?               @db.Text
  phoneNumber         String?               @map("phone_number")
  role                Role                  @default(FARMER)
  accounts            Account[]
  sessions            Session[]
  orders              Order[]               
  products            Product[]             
  collaborationPartner CollaborationPartner?
  @@map("users")
}

model Product {
  id          String     @id @default(cuid())
  imgUrl      String     @map("image_url")
  title       String
  description String     @db.Text
  priceRange  String
  createdBy   String     
  creator     User       @relation(fields: [createdBy], references: [id])
  orderItems  OrderItem[]
  @@map("products")
}

model Order {
  id          String     @id @default(cuid())
  userId      String
  state       String
  city        String
  landSize    String
  serviceType String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  @@map("order_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

enum Role {
  FARMER
  ADMIN
  COLLABORATOR
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CollaborationPartner {
  id                 String             @id @default(cuid())
  collaborationType  CollaborationType
  name               String             
  companyName        String             @map("company_name")
  email              String             @unique
  phoneNumber        String?            @map("phone_number")
  companyAddress     String             @map("company_address") @db.Text
  companyDescription String?            @map("company_description") @db.Text
  query              String?            @db.Text
  crops              Crop[]
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id])
  isApproved         Boolean            @default(false)
  isActive           Boolean            @default(false)
  isDeleted          Boolean            @default(false)
  deletedAt          DateTime?          
  @@map("collaboration_partners")
}

model Crop {
  id             String               @id @default(cuid())
  cropName       String
  priceRange     String          
  partnerId      String
  partner        CollaborationPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}

enum CollaborationType {
  STUBBLE_PURCHASING_COMPANY
  MACHINE_RENTAL
  TRANSPORTATION_COMPANY
  AGRICULTURE_SHOPS
}